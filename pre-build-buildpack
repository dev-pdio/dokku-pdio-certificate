#!/usr/bin/env bash

set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
APP="$1"; IMAGE="dokku/$APP"
echo "-----> Installing pdiolibs libs ..."
COMMAND=$(cat <<EOF
echo deb http://cz.archive.ubuntu.com/ubuntu focal main universe >> /etc/apt/sources.list
apt-get -y update
apt-get install -y -q --no-install-recommends openjdk-11-jdk ghostscript poppler-utils fontconfig libfontconfig1-dev libfreetype6-dev libx11-dev libxext-dev libxrender-dev xfonts-base xfonts-75dpi fonts-freefont-ttf fonts-liberation ttf-dejavu
echo "[Start] Enabling GhostScript Fonts..."
echo "/Arial << /FileType /TrueType /Path (/usr/share/fonts/truetype/msttcorefonts/Arial.ttf) /SubfontID 0 /CSI [(Identity) 0] >> ;" >> /usr/share/ghostscript/9.55.0/Resource/Init/cidfmap
echo "/Arial,Bold << /FileType /TrueType /Path (/usr/share/fonts/truetype/msttcorefonts/Arial_Bold.ttf) /SubfontID 0 /CSI [(Identity) 0] >> ;" >> /usr/share/ghostscript/9.55.0/Resource/Init/cidfmap
echo "[Finish] Enabling GhostScript Fonts..."
env
echo "[Start] OpenSSL Certificate Legacy Setup..."
# Gerar private key
openssl pkcs12 -in /app/certificates/pdio_crt.pfx -nocerts -nodes -legacy -password env:CERTIFICATE_PASSWORD -out /app/certificates/private.key
# Gerar public key
openssl rsa -in /app/certificates/private.key -pubout -out /app/certificates/public.key
# Gerar certificate
openssl pkcs12 -in /app/certificates/pdio_crt.pfx -clcerts -nokeys -legacy -out /app/certificates/ping.crt
echo "[Finish] OpenSSL Certificate Legacy Setup..."
echo "-----> pdiolibs installed!"
sleep 1 # wait so that docker run has not exited before docker attach
EOF
)
id=$(docker run -d $IMAGE /bin/bash -e -c "$COMMAND")
#enable logs
docker attach $id
test $(docker wait $id) -eq 0
docker commit $id $IMAGE > /dev/null
